Go是一种新的语言，一种并发的、带垃圾回收的、快速编译的语言。它具有以下特点：

它可以在一台计算机上用几秒钟的时间编译一个大型的Go程序。
Go为软件构造提供了一种模型，它使依赖分析更加容易，且避免了大部分C风格include文件与库的开头。
Go是静态类型的语言，它的类型系统没有层级。因此用户不需要在定义类型之间的关系上花费时间，这样感觉起来比典型的面向对象语言更轻量级。
Go完全是垃圾回收型的语言，并为并发执行与通信提供了基本的支持。
按照其设计，Go打算为多核机器上系统软件的构造提供一种方法。
Go是一种编译型语言，它结合了解释型语言的游刃有余，动态类型语言的开发效率，以及静态类型的安全性。它也打算成为现代的，支持网络与多核计算的语言。要满足这些目标，需要解决一些语言上的问题：一个富有表达能力但轻量级的类型系统，并发与垃圾回收机制，严格的依赖规范等等。这些无法通过库或工具解决好，因此Go也就应运而生了。

Golang编译的程序不需要虚拟机环境就可以运行，因此在绝大多数情况下Golang的效率仅次于C/C++。
Golang引入了goroutine概念，它是一种比线程更”轻盈“的协程，它使得并发编程变得简单粗暴，而且可以充分利用多核心的CPU
Golang自带GC，不需要像C++那样使用delete或者free()来释放内存。

正如 “21 世纪的 C 语言” 这句话所说，Go 语言并不是凭空而造的，而是和 C++、Java 和 C# 一样属于 C 系。
